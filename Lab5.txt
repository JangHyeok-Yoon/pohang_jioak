import tensorflow as tf

x_data = [[1, 2], [2, 3], [3, 1], [4, 3], [5, 3], [6, 2]]
y_data = [[0], [0], [0], [1], [1], [1]]

x = tf.placeholder(tf.float32, shape = [None, 2])
y = tf.placeholder(tf.float32, shape = [None, 1])

w= tf.Variable(tf.random_normal[2, 1])
b =tf.Variable(tf.random_normal[1])

hypothesis = tf.sigmoid(tf.matmul(x, y) + b)
cost = -tf.reduce_mean(y*tf.log(hypothesis) + (1-y)tf.log(1-hypothesis))

train = tf.train.GradientDescentOptimizer(learning_rate = 0.05).minimize(cost)

predicted = tf.cast(hypothesis > 0.5, dtype=tf.float32)
accuracy = tf.reduce_mean(tf.cast(tf.equal(y, hypothesis), dtype=tf.float32))

sess = tf.Session()
sess.run(tf.global_variables_initializer())

for step in range(2001):
	costValue, _ = sess.run([cost, train], feed_dict={x:x_data, y:y_data})
	if step % 200 == 0:
		print(step, costValue)

pd, hypValue, ac = sess.run([predicted, hypothesis, accuracy], feed_dict={x:x_data, y:y_data})
print(hypValue, pd, ac)